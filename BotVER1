import logging
import re
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from telethon import TelegramClient, events
from telethon.tl.functions.messages import SendReactionRequest
from telethon.tl.types import ReactionEmoji

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# API —Ç–æ–∫–µ–Ω –¥–ª—è Aiogram
API_TOKEN = "111111111111111111"

# –î–∞–Ω–Ω—ã–µ UserBot
API_ID = "111111111111"
API_HASH = "11111111111111111111"
USERBOT_SESSION = "userbot_session"

# –ß–∞—Ç—ã
SOURCE_CHAT_ID = -1111111111  # CB
TARGET_CHAT_IDS = [-111111111]  # –ß–∞—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º UserBot
client = TelegramClient(USERBOT_SESSION, API_ID, API_HASH)

# –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π {ID: {"status": ..., "pending_replies": [(chat_id, message_id)]}}
cache = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_command(message: Message):
    await message.answer("‚úÖ")

# UserBot –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ SOURCE_CHAT
@client.on(events.NewMessage(chats=SOURCE_CHAT_ID))
async def userbot_message_handler(event):
    text = event.message.text if event.message.text else ""
    logging.info(f"UserBot –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {SOURCE_CHAT_ID}: {text}")

    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞ –∫–∞–≤—ã—á–µ–∫ –∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
    tracker_id_match = re.search(r"TrackerID:\s*`?([\w-]+)`?", text)
    client_id_match = re.search(r"ClientID:\s*`?([\w-]+)`?", text)
    status_match = re.search(r"C—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\s*`?(—É—Å–ø–µ—Ö|–æ—à–∏–±–∫–∞)`?", text)

    tracker_id = tracker_id_match.group(1) if tracker_id_match else None
    client_id = client_id_match.group(1) if client_id_match else None
    status = status_match.group(1) if status_match else None

    if not tracker_id and not client_id:
        logging.warning("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω TrackerID –∏–ª–∏ ClientID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    logging.info(f" –ù–∞–π–¥–µ–Ω TrackerID: {tracker_id}, ClientID: {client_id}, –°—Ç–∞—Ç—É—Å: {status}")

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–æ—à–∏–±–∫–∞", –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if status == "–æ—à–∏–±–∫–∞":
        logging.info(f" ID {tracker_id or client_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–æ—à–∏–±–∫–∞', –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –¥–ª—è "—É—Å–ø–µ—Ö–∞"
    for id_value in [tracker_id, client_id]:
        if id_value:
            if id_value not in cache:
                cache[id_value] = {"status": "—É—Å–ø–µ—Ö", "pending_replies": []}

            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            pending_replies = cache[id_value]["pending_replies"][:]
            cache[id_value]["pending_replies"] = []  # –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏—è

            for chat_id, message_id in pending_replies:
                await bot.send_message(chat_id, f"{id_value} –£—Å–ø–µ—Ö", reply_to_message_id=message_id)
                await add_reaction(chat_id, message_id)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω '–£—Å–ø–µ—Ö' –∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {id_value}")

    logging.info(f"üóÉ –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à: {cache}")

# Bot –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ TARGET_CHAT (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã)
@dp.message()
async def handle_message(message: Message):
    chat_id = message.chat.id

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –±–µ—Ä–µ–º caption (–ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
    text = message.caption if message.caption else message.text

    if not text:
        logging.info(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_id}, –Ω–æ –æ–Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
        return

    logging.info(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_id}: {text}")

    if text in cache:
        cached_status = cache[text]["status"]

        if cached_status == "—É—Å–ø–µ—Ö":
            await bot.send_message(chat_id, f"{text} –£—Å–ø–µ—Ö", reply_to_message_id=message.message_id)
            await add_reaction(chat_id, message.message_id)
            logging.info(f"–ù–∞–π–¥–µ–Ω ID {text}, —Å—Ç–∞—Ç—É—Å '—É—Å–ø–µ—Ö'. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è ‚ù§Ô∏è.")
        else:
            logging.info(f"ID {text} –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å '–æ—à–∏–±–∫–∞'. –û—Ç–≤–µ—Ç –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        # –ï—Å–ª–∏ ID –ø–æ–∫–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–∑–∂–µ
        if text not in cache:
            cache[text] = {"status": None, "pending_replies": []}

        cache[text]["pending_replies"].append((chat_id, message.message_id))
        logging.info(f"ID {text} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ. –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SOURCE_CHAT.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telethon
async def add_reaction(chat_id, message_id, emoji="‚ù§Ô∏è"):
    try:
        reaction = [ReactionEmoji(emoticon=emoji)]  # –û–±—ä–µ–∫—Ç —Ä–µ–∞–∫—Ü–∏–∏
        await client(SendReactionRequest(
            peer=chat_id,
            msg_id=message_id,
            reaction=reaction
        ))
        logging.info(f"–†–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id} –≤ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

# –¢–∞–π–º–µ—Ä –¥–ª—è —Å–≤–µ—Ä–∫–∏ –∫—ç—à–∞
async def cache_checker():
    while True:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..")
    await client.start()
    asyncio.create_task(cache_checker())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
